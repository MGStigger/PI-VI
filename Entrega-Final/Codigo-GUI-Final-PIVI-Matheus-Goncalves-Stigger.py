# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector as mc
from PyQt5.QtWidgets import QTableWidgetItem


class Ui_MainWindow(object):

    # HISTORICO GERAL MEMORIA (%)
    def botao6(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            mycursor.execute("SELECT data, hora, CONCAT(memory_percent, ' %') FROM datahora INNER JOIN memory ON datahora.id = memory.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # HISTORICO GERAL CPU (%)
    def botao10(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            #mycursor.execute("SELECT CONCAT({}, ' %') FROM {}".format("cpu_percent", "cpu"))
            mycursor.execute("SELECT data, hora, CONCAT(cpu_percent, ' %') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # HISTORICO GERAL CPU (MHz)
    def botao17(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            mycursor.execute("SELECT data, hora, CONCAT(cpu_mhz, ' MHz') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # HISTORICO GERAL CPU (째C)
    def botao24(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            mycursor.execute("SELECT data, hora, CONCAT(cpu_temp, ' 째C') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # HISTORICO GERAL DISCO (%)
    def botao31(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            mycursor.execute("SELECT data, hora, CONCAT(disk_percent, ' %') FROM datahora INNER JOIN disk ON datahora.id = disk.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # HISTORICO GERAL BATERIA (%)
    def botao38(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            mycursor.execute("SELECT data, hora, CONCAT(battery_percent, ' %') FROM datahora INNER JOIN battery ON datahora.id = battery.id")
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    """# PESQUISAR MEMORIA (%)
    def botao1(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit.text()
            mycursor.execute("SELECT data, hora, CONCAT(memory_percent, ' %') FROM datahora INNER JOIN memory ON datahora.id = memory.id WHERE memory_percent = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

    """# PESQUISAR CPU (%)
    def botao9(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit_6.text()
            mycursor.execute("SELECT data, hora, CONCAT(cpu_percent, ' %') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE cpu_percent = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

    """# PESQUISAR CPU (MHz)
    def botao16(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit_9.text()
            mycursor.execute("SELECT data, hora, CONCAT(cpu_mhz, ' MHz') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE cpu_mhz = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

    """# PESQUISAR CPU (째C)
    def botao23(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit_12.text()
            mycursor.execute("SELECT data, hora, CONCAT(cpu_temp, ' 째C') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE cpu_temp = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

    """# PESQUISAR DISCO (%)
    def botao30(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit_15.text()
            mycursor.execute("SELECT data, hora, CONCAT(disk_percent, ' %') FROM datahora INNER JOIN disk ON datahora.id = disk.id WHERE disk_percent = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

    """# PESQUISAR BATERIA (%)
    def botao37(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()
            pesquisar = self.lineEdit_18.text()
            mycursor.execute("SELECT data, hora, CONCAT(battery_percent, ' %') FROM datahora INNER JOIN battery ON datahora.id = battery.id WHERE battery_percent = {}".format(pesquisar))
            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")"""

################################################################################################################################
################################################################################################################################

    # PESQUISAR MEMORIA (%)
    def botao1(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit.text()

            datainicial = self.dateTimeEdit.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_2.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(memory_percent, ' %') FROM datahora INNER JOIN memory ON datahora.id = memory.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND memory_percent = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # PESQUISAR CPU (%)
    def botao9(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit_6.text()

            datainicial = self.dateTimeEdit_4.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_3.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_percent, ' %') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_percent = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # PESQUISAR CPU (MHz)
    def botao16(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit_9.text()

            datainicial = self.dateTimeEdit_6.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_5.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_mhz, ' MHz') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_mhz = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # PESQUISAR CPU (째C)
    def botao23(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit_12.text()

            datainicial = self.dateTimeEdit_8.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_7.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_temp, ' 째C') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_temp = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # PESQUISAR DISCO (%)
    def botao30(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit_15.text()

            datainicial = self.dateTimeEdit_10.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_9.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(disk_percent, ' %') FROM datahora INNER JOIN disk ON datahora.id = disk.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND disk_percent = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # PESQUISAR BATERIA (%)
    def botao37(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            pesquisar = self.lineEdit_18.text()

            datainicial = self.dateTimeEdit_12.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_11.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(battery_percent, ' %') FROM datahora INNER JOIN battery ON datahora.id = battery.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND battery_percent = {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, pesquisar))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MENOR QUE MEMORIA (%)
    def botao2(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_2.text()

            datainicial = self.dateTimeEdit.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_2.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(memory_percent, ' %') FROM datahora INNER JOIN memory ON datahora.id = memory.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND memory_percent < {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MENOR QUE CPU (%)
    def botao11(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_4.text()

            datainicial = self.dateTimeEdit_4.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_3.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_percent, ' %') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_percent < {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MENOR QUE CPU (MHz)
    def botao18(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_7.text()

            datainicial = self.dateTimeEdit_6.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_5.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_mhz, ' MHz') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_mhz < {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MENOR QUE CPU (째C)
    def botao25(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_10.text()

            datainicial = self.dateTimeEdit_8.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_7.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_temp, ' 째C') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_temp < {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MENOR QUE DISCO (%)
    def botao32(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_13.text()

            datainicial = self.dateTimeEdit_10.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_9.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(disk_percent, ' %') FROM datahora INNER JOIN disk ON datahora.id = disk.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND disk_percent < {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

    # MAIOR QUE CPU (MHz)
    def botao15(self):
        try:
            mydb = mc.connect(host="localhost",user="root",password="201811057",database="mydatabase")
            mycursor = mydb.cursor()

            menorque = self.lineEdit_8.text()

            datainicial = self.dateTimeEdit_6.text()
            dia = (datainicial[0]) + (datainicial[1])
            mes = (datainicial[3]) + (datainicial[4])
            ano = (datainicial[6]) + (datainicial[7]) + (datainicial[8]) + (datainicial[9])
            hora = (datainicial[11]) + (datainicial[12])
            minuto = (datainicial[14]) + (datainicial[15])

            datafinal = self.dateTimeEdit_5.text()
            dia2 = (datafinal[0]) + (datafinal[1])
            mes2 = (datafinal[3]) + (datafinal[4])
            ano2 = (datafinal[6]) + (datafinal[7]) + (datafinal[8]) + (datafinal[9])
            hora2 = (datafinal[11]) + (datafinal[12])
            minuto2 = (datafinal[14]) + (datafinal[15])

            mycursor.execute("SELECT data, hora, CONCAT(cpu_mhz, ' MHz') FROM datahora INNER JOIN cpu ON datahora.id = cpu.id WHERE ((data = '{}-{}-{}' AND hora >= '{}:{}:00') OR (data > '{}-{}-{}' AND data < '{}-{}-{}') OR (data = '{}-{}-{}' AND hora <= '{}:{}:00')) AND cpu_mhz > {}".format(ano, mes, dia, hora, minuto, ano, mes, dia, ano2, mes2, dia2, ano2, mes2, dia2, hora2, minuto2, menorque))

            result = mycursor.fetchall()
            self.tableWidget.setRowCount(0)
            for row_number, row_data in enumerate(result):
                self.tableWidget.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tableWidget.setItem(row_number, column_number, QTableWidgetItem(str(data)))
        except mc.Error as e:
            print("Error")

################################################################################################################################
################################################################################################################################

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1365, 725)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 20, 141, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(250, 50, 81, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(250, 80, 81, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.botao1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(340, 80, 81, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.botao2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(340, 50, 81, 20))
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(430, 50, 81, 20))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(430, 80, 81, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit.setGeometry(QtCore.QRect(10, 50, 111, 22))
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 80, 71, 16))
        self.label_2.setObjectName("label_2")
        self.dateTimeEdit_2 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_2.setGeometry(QtCore.QRect(130, 50, 111, 22))
        self.dateTimeEdit_2.setObjectName("dateTimeEdit_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(520, 50, 81, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(520, 80, 81, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(610, 50, 81, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.botao6)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(610, 80, 81, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(150, 80, 61, 16))
        self.label_3.setObjectName("label_3")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(430, 190, 81, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(250, 190, 81, 23))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.botao9)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(340, 160, 81, 20))
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(610, 160, 81, 23))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.botao10)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 130, 111, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(340, 190, 81, 23))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(self.botao11)
        self.dateTimeEdit_3 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_3.setGeometry(QtCore.QRect(130, 160, 111, 22))
        self.dateTimeEdit_3.setObjectName("dateTimeEdit_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(150, 190, 61, 16))
        self.label_5.setObjectName("label_5")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5.setGeometry(QtCore.QRect(430, 160, 81, 20))
        self.lineEdit_5.setText("")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.dateTimeEdit_4 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_4.setGeometry(QtCore.QRect(10, 160, 111, 22))
        self.dateTimeEdit_4.setObjectName("dateTimeEdit_4")
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(520, 190, 81, 23))
        self.pushButton_12.setObjectName("pushButton_12")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(250, 160, 81, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 190, 71, 16))
        self.label_6.setObjectName("label_6")
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setGeometry(QtCore.QRect(520, 160, 81, 23))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(610, 190, 81, 23))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setGeometry(QtCore.QRect(430, 310, 81, 23))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_15.clicked.connect(self.botao15)
        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setGeometry(QtCore.QRect(250, 310, 81, 23))
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_16.clicked.connect(self.botao16)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_7.setGeometry(QtCore.QRect(340, 280, 81, 20))
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.pushButton_17 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_17.setGeometry(QtCore.QRect(610, 280, 81, 23))
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_17.clicked.connect(self.botao17)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 250, 121, 16))
        self.label_7.setObjectName("label_7")
        self.pushButton_18 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_18.setGeometry(QtCore.QRect(340, 310, 81, 23))
        self.pushButton_18.setObjectName("pushButton_18")
        self.pushButton_18.clicked.connect(self.botao18)
        self.dateTimeEdit_5 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_5.setGeometry(QtCore.QRect(130, 280, 111, 22))
        self.dateTimeEdit_5.setObjectName("dateTimeEdit_5")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(150, 310, 61, 16))
        self.label_8.setObjectName("label_8")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_8.setGeometry(QtCore.QRect(430, 280, 81, 20))
        self.lineEdit_8.setText("")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.dateTimeEdit_6 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_6.setGeometry(QtCore.QRect(10, 280, 111, 22))
        self.dateTimeEdit_6.setObjectName("dateTimeEdit_6")
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setGeometry(QtCore.QRect(520, 310, 81, 23))
        self.pushButton_19.setObjectName("pushButton_19")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_9.setGeometry(QtCore.QRect(250, 280, 81, 20))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(30, 310, 71, 16))
        self.label_9.setObjectName("label_9")
        self.pushButton_20 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_20.setGeometry(QtCore.QRect(520, 280, 81, 23))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_21.setGeometry(QtCore.QRect(610, 310, 81, 23))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_22 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_22.setGeometry(QtCore.QRect(430, 430, 81, 23))
        self.pushButton_22.setObjectName("pushButton_22")
        self.pushButton_23 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_23.setGeometry(QtCore.QRect(250, 430, 81, 23))
        self.pushButton_23.setObjectName("pushButton_23")
        self.pushButton_23.clicked.connect(self.botao23)
        self.lineEdit_10 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_10.setGeometry(QtCore.QRect(340, 400, 81, 20))
        self.lineEdit_10.setText("")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.pushButton_24 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_24.setGeometry(QtCore.QRect(610, 400, 81, 23))
        self.pushButton_24.setObjectName("pushButton_24")
        self.pushButton_24.clicked.connect(self.botao24)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 370, 111, 16))
        self.label_10.setObjectName("label_10")
        self.pushButton_25 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_25.setGeometry(QtCore.QRect(340, 430, 81, 23))
        self.pushButton_25.setObjectName("pushButton_25")
        self.pushButton_25.clicked.connect(self.botao25)
        self.dateTimeEdit_7 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_7.setGeometry(QtCore.QRect(130, 400, 111, 22))
        self.dateTimeEdit_7.setObjectName("dateTimeEdit_7")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(150, 430, 61, 16))
        self.label_11.setObjectName("label_11")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_11.setGeometry(QtCore.QRect(430, 400, 81, 20))
        self.lineEdit_11.setText("")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.dateTimeEdit_8 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_8.setGeometry(QtCore.QRect(10, 400, 111, 22))
        self.dateTimeEdit_8.setObjectName("dateTimeEdit_8")
        self.pushButton_26 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_26.setGeometry(QtCore.QRect(520, 430, 81, 23))
        self.pushButton_26.setObjectName("pushButton_26")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_12.setGeometry(QtCore.QRect(250, 400, 81, 20))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(30, 430, 71, 16))
        self.label_12.setObjectName("label_12")
        self.pushButton_27 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_27.setGeometry(QtCore.QRect(520, 400, 81, 23))
        self.pushButton_27.setObjectName("pushButton_27")
        self.pushButton_28 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_28.setGeometry(QtCore.QRect(610, 430, 81, 23))
        self.pushButton_28.setObjectName("pushButton_28")
        self.pushButton_29 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_29.setGeometry(QtCore.QRect(430, 550, 81, 23))
        self.pushButton_29.setObjectName("pushButton_29")
        self.pushButton_30 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_30.setGeometry(QtCore.QRect(250, 550, 81, 23))
        self.pushButton_30.setObjectName("pushButton_30")
        self.pushButton_30.clicked.connect(self.botao30)
        self.lineEdit_13 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_13.setGeometry(QtCore.QRect(340, 520, 81, 20))
        self.lineEdit_13.setText("")
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.pushButton_31 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_31.setGeometry(QtCore.QRect(610, 520, 81, 23))
        self.pushButton_31.setObjectName("pushButton_31")
        self.pushButton_31.clicked.connect(self.botao31)
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(10, 490, 121, 16))
        self.label_13.setObjectName("label_13")
        self.pushButton_32 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_32.setGeometry(QtCore.QRect(340, 550, 81, 23))
        self.pushButton_32.setObjectName("pushButton_32")
        self.pushButton_32.clicked.connect(self.botao32)
        self.dateTimeEdit_9 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_9.setGeometry(QtCore.QRect(130, 520, 111, 22))
        self.dateTimeEdit_9.setObjectName("dateTimeEdit_9")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(150, 550, 61, 16))
        self.label_14.setObjectName("label_14")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_14.setGeometry(QtCore.QRect(430, 520, 81, 20))
        self.lineEdit_14.setText("")
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.dateTimeEdit_10 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_10.setGeometry(QtCore.QRect(10, 520, 111, 22))
        self.dateTimeEdit_10.setObjectName("dateTimeEdit_10")
        self.pushButton_33 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_33.setGeometry(QtCore.QRect(520, 550, 81, 23))
        self.pushButton_33.setObjectName("pushButton_33")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_15.setGeometry(QtCore.QRect(250, 520, 81, 20))
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(30, 550, 71, 16))
        self.label_15.setObjectName("label_15")
        self.pushButton_34 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_34.setGeometry(QtCore.QRect(520, 520, 81, 23))
        self.pushButton_34.setObjectName("pushButton_34")
        self.pushButton_35 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_35.setGeometry(QtCore.QRect(610, 550, 81, 23))
        self.pushButton_35.setObjectName("pushButton_35")
        self.pushButton_36 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_36.setGeometry(QtCore.QRect(430, 670, 81, 23))
        self.pushButton_36.setObjectName("pushButton_36")
        self.pushButton_37 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_37.setGeometry(QtCore.QRect(250, 670, 81, 23))
        self.pushButton_37.setObjectName("pushButton_37")
        self.pushButton_37.clicked.connect(self.botao37)
        self.lineEdit_16 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_16.setGeometry(QtCore.QRect(340, 640, 81, 20))
        self.lineEdit_16.setText("")
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.pushButton_38 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_38.setGeometry(QtCore.QRect(610, 640, 81, 23))
        self.pushButton_38.setObjectName("pushButton_38")
        self.pushButton_38.clicked.connect(self.botao38)
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(10, 610, 131, 16))
        self.label_16.setObjectName("label_16")
        self.pushButton_39 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_39.setGeometry(QtCore.QRect(340, 670, 81, 23))
        self.pushButton_39.setObjectName("pushButton_39")
        #self.pushButton_39.clicked.connect(self.botao39)
        self.dateTimeEdit_11 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_11.setGeometry(QtCore.QRect(130, 640, 111, 22))
        self.dateTimeEdit_11.setObjectName("dateTimeEdit_11")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(150, 670, 61, 16))
        self.label_17.setObjectName("label_17")
        self.lineEdit_17 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_17.setGeometry(QtCore.QRect(430, 640, 81, 20))
        self.lineEdit_17.setText("")
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.dateTimeEdit_12 = QtWidgets.QDateTimeEdit(self.centralwidget)
        self.dateTimeEdit_12.setGeometry(QtCore.QRect(10, 640, 111, 22))
        self.dateTimeEdit_12.setObjectName("dateTimeEdit_12")
        self.pushButton_40 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_40.setGeometry(QtCore.QRect(520, 670, 81, 23))
        self.pushButton_40.setObjectName("pushButton_40")
        self.lineEdit_18 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_18.setGeometry(QtCore.QRect(250, 640, 81, 20))
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(30, 670, 71, 16))
        self.label_18.setObjectName("label_18")
        self.pushButton_41 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_41.setGeometry(QtCore.QRect(520, 640, 81, 23))
        self.pushButton_41.setObjectName("pushButton_41")
        self.pushButton_42 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_42.setGeometry(QtCore.QRect(610, 670, 81, 23))
        self.pushButton_42.setObjectName("pushButton_42")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(730, 60, 611, 611))
        self.tableWidget.setAutoFillBackground(False)
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setCornerButtonEnabled(True)
        self.tableWidget.setRowCount(20)
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.horizontalHeader().setVisible(False)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setHighlightSections(True)
        self.tableWidget.horizontalHeader().setSortIndicatorShown(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setCascadingSectionResizes(False)
        self.tableWidget.verticalHeader().setHighlightSections(True)
        self.tableWidget.verticalHeader().setSortIndicatorShown(False)
        self.tableWidget.verticalHeader().setStretchLastSection(False)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sistema de Monitoramento de Dados - Mem처ria, CPU, Disco e Bateria"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso da Mem처ria (%)</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_2.setText(_translate("MainWindow", "Menor que..."))
        self.pushButton_3.setText(_translate("MainWindow", "Maior que ..."))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_4.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_5.setText(_translate("MainWindow", "M찼ximo"))
        self.pushButton_6.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.pushButton_7.setText(_translate("MainWindow", "Gr찼fico"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_8.setText(_translate("MainWindow", "Maior que ..."))
        self.pushButton_9.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_10.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso da CPU (%)</span></p></body></html>"))
        self.pushButton_11.setText(_translate("MainWindow", "Menor que..."))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_12.setText(_translate("MainWindow", "M찼ximo"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_13.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_14.setText(_translate("MainWindow", "Gr찼fico"))
        self.pushButton_15.setText(_translate("MainWindow", "Maior que ..."))
        self.pushButton_16.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_17.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso da CPU (MHz)</span></p></body></html>"))
        self.pushButton_18.setText(_translate("MainWindow", "Menor que..."))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_19.setText(_translate("MainWindow", "M찼ximo"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_20.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_21.setText(_translate("MainWindow", "Gr찼fico"))
        self.pushButton_22.setText(_translate("MainWindow", "Maior que ..."))
        self.pushButton_23.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_24.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso da CPU (째C)</span></p></body></html>"))
        self.pushButton_25.setText(_translate("MainWindow", "Menor que..."))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_26.setText(_translate("MainWindow", "M찼ximo"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_27.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_28.setText(_translate("MainWindow", "Gr찼fico"))
        self.pushButton_29.setText(_translate("MainWindow", "Maior que ..."))
        self.pushButton_30.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_31.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso do Disco (%)</span></p></body></html>"))
        self.pushButton_32.setText(_translate("MainWindow", "Menor que..."))
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_33.setText(_translate("MainWindow", "M찼ximo"))
        self.label_15.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_34.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_35.setText(_translate("MainWindow", "Gr찼fico"))
        self.pushButton_36.setText(_translate("MainWindow", "Maior que ..."))
        self.pushButton_37.setText(_translate("MainWindow", "Pesquisar"))
        self.pushButton_38.setText(_translate("MainWindow", "Hist처rico Geral"))
        self.label_16.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt; font-weight:600;\">Uso da Bateria (%)</span></p></body></html>"))
        self.pushButton_39.setText(_translate("MainWindow", "Menor que..."))
        self.label_17.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Final</span></p></body></html>"))
        self.pushButton_40.setText(_translate("MainWindow", "M찼ximo"))
        self.label_18.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:10pt;\">Data Inicial</span></p></body></html>"))
        self.pushButton_41.setText(_translate("MainWindow", "M챠nimo"))
        self.pushButton_42.setText(_translate("MainWindow", "Gr찼fico"))
        self.tableWidget.setSortingEnabled(False)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
